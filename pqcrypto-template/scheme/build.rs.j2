extern crate cc;
extern crate glob;

use std::path::Path;

{% set globals = namespace(have_avx2=False) %}

fn main() {
    {% for scheme in schemes %}
    {% for implementation in [scheme.implementation] + scheme.alt_implementations|default([]) %}
    let target_{{ scheme.name|nameize }}_{{ implementation }}_dir = Path::new("pqclean/crypto_{{ type }}/{{ scheme.name }}/{{ implementation }}");
    let scheme_{{ scheme.name|nameize }}_{{ implementation }}_files = glob::glob(target_{{scheme.name|nameize}}_{{ implementation }}_dir.join("*.c").to_str().unwrap()).unwrap();
    {% endfor %}
    {# Do we have an AVX2 version? #}
    {% if 'avx2_implementation' in scheme %}
    {% set implementation = scheme.avx2_implementation %}
    {% set globals.have_avx2 = True %}
    #[allow(unused_variables)]
    let target_{{ scheme.name|nameize }}_{{ implementation }}_dir = Path::new("pqclean/crypto_{{ type }}/{{ scheme.name }}/{{ implementation }}");
    #[allow(unused_variables)]
    let scheme_{{ scheme.name|nameize }}_{{ implementation }}_files = glob::glob(target_{{scheme.name|nameize}}_{{ implementation }}_dir.join("*.[csS]").to_str().unwrap()).unwrap();
    {% endif %}
    {% endfor %}
    let mut builder = cc::Build::new();
    builder.include("pqclean/common")
        .flag("-std=c99");

    #[cfg(debug_assertions)]
    {
        builder.flag("-g3");
    }
    let common_dir = Path::new("pqclean/common");

    {% if globals.have_avx2 %}
    #[allow(unused_variables)]
    let keccak4x_dir = common_dir.join("keccak4x");
    {% endif %}

    {% if globals.have_avx2 %}
    #[allow(unused_mut)]
    let mut common_files = vec![
    {% else %}
    let common_files = vec![
    {% endif %}
        common_dir.join("fips202.c"),
        common_dir.join("aes.c"),
        common_dir.join("sha2.c"),
        common_dir.join("randombytes.c"),
        common_dir.join("sp800-185.c"),
    ];

    {% if globals.have_avx2 %}
    #[cfg(all(not(disable_avx2), not(target_os = "windows"), not(target_os = "macos"), target_arch = "x86_64"))]
    {
        builder
            .flag("-mavx2")
            .flag("-mbmi2")
            .flag("-maes")
            .flag("-mpopcnt");
        common_files.push(keccak4x_dir.join("KeccakP-1600-times4-SIMD256.c"));
    }
    {% endif %}


    builder.files(common_files.into_iter());
        {% for scheme in schemes %}
        {% for implementation in [scheme.implementation] + scheme.alt_implementations|default([]) %}
    builder
        .include(target_{{ scheme.name|nameize }}_{{ implementation }}_dir)
        .files(scheme_{{ scheme.name|nameize }}_{{ implementation }}_files.into_iter().map(|p| p.unwrap().to_string_lossy().into_owned()));
        {% endfor %}
        {% if 'avx2_implementation' in scheme %}
        {% set implementation = scheme.avx2_implementation %}
        #[cfg(all(not(disable_avx2), not(target_os = "windows"), not(target_os = "macos"), target_arch = "x86_64"))]
        {
            builder
            .include(target_{{ scheme.name|nameize }}_{{ implementation }}_dir)
            .files(scheme_{{ scheme.name|nameize }}_{{ implementation }}_files.into_iter().map(|p| p.unwrap().to_string_lossy().into_owned()));
        }
        {% endif %}
        {% endfor %}
    builder
        .compile("lib{{ name }}.a");

    {% if globals.have_avx2 %}
    // Print enableing flag for AVX2 implementation
    #[{{ avx2_guard }}]
    {
        println!("cargo:rustc-cfg=enable_avx2");
    }
    {% endif %}
}
