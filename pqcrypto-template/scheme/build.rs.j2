extern crate cc;
extern crate glob;

use std::env;
use std::path::PathBuf;

{% set globals = namespace(have_avx2=False) %}

fn main() {
    let common_dir: PathBuf = ["pqclean", "common"].iter().collect();
    let common_files = vec![
        common_dir.join("fips202.c"),
        common_dir.join("aes.c"),
        common_dir.join("sha2.c"),
        common_dir.join("randombytes.c"),
        common_dir.join("nistseedexpander.c"),
        common_dir.join("sp800-185.c"),
    ];

    cc::Build::new()
        .include(&common_dir)
        .files(common_files.into_iter())
        .compile("pqclean_common");

    let avx2_enabled = env::var("CARGO_FEATURE_AVX2").is_ok();
    let target_arch = env::var("CARGO_CFG_TARGET_ARCH").unwrap();
    let target_os = env::var("CARGO_CFG_TARGET_OS").unwrap();
    let is_windows = target_os == "windows";
    let is_macos = target_os == "macos";

    {% for scheme in schemes %}
    {% for implementation in [scheme.implementation] + scheme.alt_implementations|default([]) %}
    {
        let mut builder = cc::Build::new();
        let target_dir: PathBuf = ["pqclean", "crypto_{{ type }}", "{{ scheme.name }}", "{{ implementation }}"].iter().collect();
        let scheme_files = glob::glob(target_dir.join("*.c").to_str().unwrap()).unwrap();
        builder.include(&common_dir)
               .include(target_dir)
               .files(scheme_files.into_iter().map(|p| p.unwrap().to_string_lossy().into_owned()));
        builder.compile("{{ scheme.name }}_{{ implementation }}");
    }
    {% endfor %}

    {# Do we have an AVX2 version? #}
    {% if 'avx2_implementation' in scheme %}
    {% set implementation = scheme.avx2_implementation %}
    {% set globals.have_avx2 = True %}
    if {{ avx2_guard }} {
        let target_dir: PathBuf = ["pqclean", "crypto_{{ type }}", "{{ scheme.name }}", "{{ implementation }}"].iter().collect();
        let scheme_files = glob::glob(target_dir.join("*.[csS]").to_str().unwrap()).unwrap();
        let mut builder = cc::Build::new();

        if is_windows {
            builder.flag("/arch:AVX2");
        } else   {
            builder.flag("-mavx2")
            .flag("-mbmi2")
            .flag("-mbmi")
            .flag("-maes")
            .flag("-mpopcnt")
            .flag("-mpclmul");
        }
        builder.include(&common_dir)
            .include(target_dir)
            .files(scheme_files.into_iter().map(|p| p.unwrap().to_string_lossy().into_owned()))
            .compile("{{ scheme.name }}_{{ implementation }}");


	let mut builder =  cc::Build::new();
        if is_windows {
                builder.flag("/arch:AVX2");
        } else  {
                builder.flag("-mavx2");
        };
        builder
            .file(&common_dir.join("keccak4x").join("KeccakP-1600-times4-SIMD256.c"))
            .compile("keccak4x");

    }
    {% endif %}
    {% endfor %}

    {% if globals.have_avx2 %}
    // Print enableing flag for AVX2 implementation
    if {{ avx2_guard }} {
        println!("cargo:rustc-cfg=enable_avx2");
    }
    {% endif %}
}
