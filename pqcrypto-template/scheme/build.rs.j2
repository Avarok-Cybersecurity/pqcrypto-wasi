extern crate cc;
extern crate glob;

use std::path::Path;


fn main() {
    let common_dir = Path::new("pqclean/common");
    let common_files = [
        common_dir.join("fips202.c"),
        common_dir.join("aes.c"),
        common_dir.join("sha2.c"),
        common_dir.join("randombytes.c"),
    ];

    {% for scheme in schemes %}
    {% for implementation in [scheme.implementation] + scheme.alt_implementations|default([]) %}
    let target_{{ scheme.name|nameize }}_{{ implementation }}_dir = Path::new("pqclean/crypto_{{ type }}/{{ scheme.name }}/{{ implementation }}");
    let scheme_{{ scheme.name|nameize }}_{{ implementation }}_files = glob::glob(target_{{scheme.name|nameize}}_{{ implementation }}_dir.join("*.c").to_str().unwrap()).unwrap();
    {% endfor %}
    {% endfor %}
    let mut builder = cc::Build::new();
    builder.include("pqclean/common")
        .flag("-std=c99")
        .flag("-O3");
    #[cfg(debug_assertions)]
    {
        builder.flag("-g3");
    }
    builder.files(common_files.into_iter())
        {% for scheme in schemes %}
        {% for implementation in [scheme.implementation] + scheme.alt_implementations|default([]) %}
        .include(target_{{ scheme.name|nameize }}_{{ implementation }}_dir)
        .files(scheme_{{ scheme.name|nameize }}_{{ implementation }}_files.into_iter().map(|p| p.unwrap().to_string_lossy().into_owned()))
        {% endfor %}
        {% endfor %}
        .compile("lib{{ name }}.a");
}
