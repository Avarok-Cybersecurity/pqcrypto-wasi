//! Foreign function interfaces
//!
//! This module defines the foreign function interface for the following
//! crypto implementations from PQClean:
//!
{% for scheme in schemes %}//!  * {{ scheme.name }}
{% endfor %}
// This file has been generated from PQClean.
// Find the templates in pqcrypto-template
use libc::c_int;

{% for scheme in schemes %}
{% set metadata = metadatas[scheme.name] %}
{% set implementation_data = metadata['implementations']|selectattr('name', 'eq', scheme.implementation)|first %}
{% set NS_NAME = [scheme.name|namespaceize, scheme.implementation|namespaceize]|join('_') %}
pub const PQCLEAN_{{ NS_NAME }}_CRYPTO_SECRETKEYBYTES: usize = {{ implementation_data['length-secret-key'] }};
pub const PQCLEAN_{{ NS_NAME }}_CRYPTO_PUBLICKEYBYTES: usize = {{ metadata['length-public-key'] }};
pub const PQCLEAN_{{ NS_NAME }}_CRYPTO_CIPHERTEXTBYTES: usize = {{ metadata['length-ciphertext'] }};
pub const PQCLEAN_{{ NS_NAME }}_CRYPTO_BYTES: usize = {{ metadata['length-shared-secret'] }};
{% endfor %}

#[link(name = "{{ name }}")]
extern "C" {
{% for scheme in schemes %}
{% set NS_NAME = [scheme.name|namespaceize, scheme.implementation|namespaceize]|join('_') %}
    pub fn PQCLEAN_{{ NS_NAME }}_crypto_kem_keypair(pk: *mut u8, sk: *mut u8) -> c_int;
    pub fn PQCLEAN_{{ NS_NAME }}_crypto_kem_enc(ct: *mut u8, ss: *mut u8, pk: *const u8) -> c_int;
    pub fn PQCLEAN_{{ NS_NAME }}_crypto_kem_dec(
        ss: *mut u8,
        ct: *const u8,
        sk: *const u8,
    ) -> c_int;
{% endfor %}
}

{% for scheme in schemes %}
{% set NS_NAME = [scheme.name|namespaceize, scheme.implementation|namespaceize]|join('_') %}
#[cfg(test)]
mod test_{{ scheme.name }}_{{ scheme.implementation }} {
    use super::*;
    use std::mem;
    #[test]
    fn test_ffi() {
        unsafe {
            let mut pk: [u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_PUBLICKEYBYTES] = mem::uninitialized();
            let mut sk: [u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_SECRETKEYBYTES] = mem::uninitialized();
            let mut ct: [u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_CIPHERTEXTBYTES] = mem::uninitialized();
            let mut ss1: [u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_BYTES] = mem::uninitialized();
            let mut ss2: [u8; PQCLEAN_{{ NS_NAME }}_CRYPTO_BYTES] = mem::uninitialized();

            assert_eq!(
                0,
                PQCLEAN_{{ NS_NAME }}_crypto_kem_keypair(pk.as_mut_ptr(), sk.as_mut_ptr())
            );
            assert_eq!(
                0,
                PQCLEAN_{{ NS_NAME }}_crypto_kem_enc(
                    ct.as_mut_ptr(),
                    ss1.as_mut_ptr(),
                    pk.as_ptr()
                )
            );
            assert_eq!(
                0,
                PQCLEAN_{{ NS_NAME }}_crypto_kem_dec(ss2.as_mut_ptr(), ct.as_ptr(), sk.as_ptr())
            );
            assert_eq!(ss1, ss2);
        }
    }
}
{% endfor %}
